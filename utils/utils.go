package utils

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

// IsFileExist –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
func IsFileExist(filename string) bool {
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		return false
	}

	return true
}

// WriteToFile –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
func WriteToFile(fileName string, text string) {
	d1 := []byte(text)
	err := ioutil.WriteFile(fileName, d1, os.ModePerm)
	if err != nil {
		fmt.Println("Error create file with name: fileName")
	}
}

// PrintlnSuccessMessage –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –≤ –ª–æ–≥
func PrintlnSuccessMessage(message string) {
	fmt.Println(message + "  üéâ")
}

// PrintlnErrorMessage –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥
func PrintlnErrorMessage(message string) {
	fmt.Println("‚ùå  " + message + "  ‚ùå")
}

// PrintlnAttentionMessage –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—â–µ–µ –≤–Ω–∏–º–∞–Ω–∏—è –≤ –ª–æ–≥
func PrintlnAttentionMessage(message string) {
	fmt.Println("üî∂  " + message + "  üî∂")
}

// FixBackQuotes Replace \%\*\*\*\% to \`\`\` and \%\*\% to \`
func FixBackQuotes(content string) string {
	content = strings.Replace(content, "%***%", "```", -1)
	content = strings.Replace(content, "%*%", "`", -1)

	return content
}

// ProjectName –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ –ø–∞–ø–∫–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xcodeproj)
func ProjectName() string {
	files, err := ioutil.ReadDir(".")
	if err != nil {
		return ""
	}

	for _, file := range files {
		const suffix = ".xcodeproj"
		if strings.HasSuffix(file.Name(), suffix) {
			return strings.Replace(file.Name(), suffix, "", 1)
		}
	}

	return ""
}
